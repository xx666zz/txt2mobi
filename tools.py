import re,os
from genncx import *
from genopf import *
from genhtml import *
def cut(buf,buf1):
    buf1=list(tuple(buf1))
    print("自动分章中，请稍候...")
    regs=["[0-9○]+[、]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[0-9○]+[.]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[0-9○]+[ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[0-9○]+[　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[0-9○]+[\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第[一二三四五六七八九十百千万0-9○]+[章卷部幕][　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第[一二三四五六七八九十百千万0-9○]+[章卷部幕][ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第[一二三四五六七八九十百千万0-9○]+[章卷部幕][\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第[一二三四五六七八九十百千万0-9○]+[章卷部幕]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[○一二三四五六七八九十百千万]+[、]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[○一二三四五六七八九十百千万]+[.]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[○一二三四五六七八九十百千万]+[ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[○一二三四五六七八九十百千万]+[　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "[○一二三四五六七八九十百千万]+[\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n"]
    r=["([0-9○]+)[、]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([0-9○]+)[.]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([0-9○]+)[ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([0-9○]+)[　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
        "([0-9○]+)[\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第([一二三四五六七八九十百千万0-9○]+)[章卷部幕][　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第([一二三四五六七八九十百千万0-9○]+)[章卷部幕][ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "第([一二三四五六七八九十百千万0-9○]+)[章卷部幕][\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
       "第([一二三四五六七八九十百千万0-9○]+)[章卷部幕]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([○一二三四五六七八九十百千万]+)[、]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([○一二三四五六七八九十百千万]+)[.]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([○一二三四五六七八九十百千万]+)[ ]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([○一二三四五六七八九十百千万]+)[　]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n",
          "([○一二三四五六七八九十百千万]+)[\n]|楔子[ 　]*\n|前言[ 　]*\n|序[ 　]*\n"]
    l=[]
    for reg in regs:
        t=re.finditer(reg,buf)
        l.append([])
        for i in t:
            l[-1].append([i.start(),i.end()])
    m=0
    for i in range(len(l)):
        if len(l[i])>m:
           m=len(l[i])
           index=i
    if m==0:
        return ['无法分章'],[buf]
    else:
        text=[]
        title=['0']
        right=0
        count=[0,0]
        last=1
        lastt=''
        for i in l[index]:
            flag=False
            right1=buf[i[0]:].find('\n')+i[0]
            le=len(re.findall(r[index],buf[i[0]:i[1]])[0])
            if le==0 or le==last or le==last+1 or le==last-1:
                flag=True
                if le==last-1:
                    count[0]+=1
                elif le==last+1:
                    count[1]+=1
                if count[0]==17:
                    last=last-1
                    count=[0,0]
                if count[1]==7:
                    last=last+1
                    count=[0,0]
            if re.findall(r[index],buf[i[0]:i[1]])[0]==lastt:
                flag=False
            lastt=re.findall(r[index],buf[i[0]:i[1]])[0]
            if right1-i[0]<28 and flag==True:
                tit=buf[i[0]:i[1]]
                text.append([])
                for i1 in range(len(buf1)-1):
                    if tit in buf1[i1]:
                        title.append(buf1[i1][:-1])
                        break
                    else:
                        text[-1].append(buf1[i1][:-1])
                del buf1[:i1]
        text.append([])
        for i in buf1:
            text[-1].append(i[:-1])
        return title,text
def cut1(buf,reg,buf1):
    buf1=list(tuple(buf1))
    t=re.finditer(reg,buf)
    l=[]
    for i in t:
        l.append([i.start(),i.end()])
    if len(l)==0:
        return ['无法分章'],[buf]
    else:
        text=[]
        title=['0']
        right=0
        for i in l:
            tit=buf[i[0]:i[1]]
            text.append([])
            for i1 in range(len(buf1)-1):
                if tit in buf1[i1-1][-3:]+buf1[i1]:
                    title.append(buf1[i1][:-1])
                    break
                else:
                    text[-1].append(buf1[i1][:-1])
            del buf1[:i1]
        text.append([])
        for i in buf1:
            text[-1].append(i[:-1])
        return title,text

def copy():
    style='''/*  Generated by EasyPub  */
/*  此css由EasyPub自动生成  */
/*  部分参考老牛中文样式  */

@font-face {
      font-family: "easypub";
      src: url(res:///system/fonts/DroidSansFallback.ttf),
           url(res:///ebook/fonts/../../system/fonts/DroidSansFallback.ttf);
}

@page { 
      margin-top: 0px;
      margin-bottom: 0px;
}

body { 
      font-family: "easypub";
      padding: 0;
      margin-left: 0px;
      margin-right: 0px;
      orphans: 0;
      widows: 0;
}

p { 
      font-family: "easypub";
      font-size: 120%;
      line-height: 125%;
      margin-top: 5px;
      margin-bottom: 0;
      margin-left: 0;
      margin-right: 0;
      orphans: 0;
      widows: 0;
}

.a { 
      text-indent: 0em;
}

div.centeredimage {
      text-align:center;
      display:block;
      margin-top: 0.5em;
      margin-bottom: 0.5em;
}

img.attpic {
      border: 1px solid #000000;
      max-width: 100%;
      margin: 0;
}

.booktitle {
      margin-top: 30%;
      margin-bottom: 0;
      border-style: none solid none none;
      border-width: 50px;
      border-color: #4E594D;
      font-size: 3em;
      line-height: 120%;
      text-align: right;
}

.bookauthor {
      margin-top: 0;
      border-style: none solid none none;
      border-width: 50px;
      border-color: #4E594D;
      page-break-after: always;
      font-size: large;
      line-height: 120%;
      text-align: right;
}

.titletoc, .titlel1top, .titlel1std,.titlel2top, .titlel2std,.titlel3top, .titlel3std,.titlel4std {
      margin-top: 0;
      border-style: none double none solid;
      border-width: 0px 5px 0px 20px;
      border-color: #586357;
      background-color: #C1CCC0;
      padding: 45px 5px 5px 5px;
      font-size: x-large;
      line-height: 115%;
      text-align: justify;
}

.titlel1single,.titlel2single,.titlel3single {
      margin-top: 35%;
      border-style: none solid none none;
      border-width: 30px;
      border-color: #4E594D;
      padding: 30px 5px 5px 5px;
      font-size: x-large;
      line-height: 125%;
      text-align: right;
}

.toc {
      margin-left:16%;
      padding:0px;
      line-height:130%;
      text-align: justify;
}

.toc a { text-decoration: none; color: #000000; }

.tocl1 {
      margin-top:0.5em;
      margin-left:-30px;
      border-style: none double double solid;
      border-width: 0px 5px 2px 20px;
      border-color: #6B766A;
      line-height: 135%;
      font-size: 132%;
}

.tocl2 {
      margin-top: 0.5em;
      margin-left:-20px;
      border-style: none double none solid;
      border-width: 0px 2px 0px 10px;
      border-color: #939E92;
      line-height: 123%;
      font-size: 120%;
}

.tocl3 {
      margin-top: 0.5em;
      margin-left:-20px;
      border-style: none double none solid;
      border-width: 0px 2px 0px 8px;
      border-color: #939E92;
      line-height: 112%;
      font-size: 109%;
}

.tocl4 {
      margin-top: 0.5em;
      margin-left:-20px;
      border-style: none double none solid;
      border-width: 0px 2px 0px 6px;
      border-color: #939E92;
      line-height: 115%;
      font-size: 110%;
}

.subtoc {
      margin-left:15%;
      padding:0px;
      text-align: justify;
}

.subtoclist {
      margin-top: 0.5em;
      margin-left:-20px;
      border-style: none double none solid;
      border-width: 0px 2px 0px 10px;
      border-color: #939E92;
      line-height: 123%;
      font-size: 120%;
}

'''
    if os.path.exists('./temp')==False:
        os.mkdir('./temp')
    f=open('./temp/style.css','w',encoding='utf-8')
    f.write(style)
    f.close()

